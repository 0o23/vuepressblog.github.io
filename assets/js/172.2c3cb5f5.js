(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{592:function(t,e,a){"use strict";a.r(e);var r=a(45),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"白话js原型与继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#白话js原型与继承"}},[t._v("#")]),t._v(" 白话JS原型与继承")]),t._v(" "),a("blockquote",[a("p",[t._v("本文参考了MDN的这篇"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"一、原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、原型"}},[t._v("#")]),t._v(" 一、原型：")]),t._v(" "),a("h3",{attrs:{id:"_1-我对原型的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-我对原型的理解"}},[t._v("#")]),t._v(" 1. 我对原型的理解：")]),t._v(" "),a("p",[t._v("在我的理解中，JS 中的原型类似于 C++ 中的父类。")]),t._v(" "),a("h3",{attrs:{id:"_2-原型的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型的作用"}},[t._v("#")]),t._v(" 2. 原型的作用：")]),t._v(" "),a("p",[t._v("如果对象本身并没有某个方法(比如：pop,forEach...)，但它的原型有，那它就可以借用它的原型(“父亲”)的方法。注：如果对象本身有某个方法，而且它的原型也有，则优先使用对象里的方法。(自己有钱就不用找长辈借)")]),t._v(" "),a("p",[t._v("一个普通的对象 obj，一般它的原型是 Object。在JS中，可以使用对象自带的 "),a("code",[t._v("__proto__")]),t._v(" 属性，来获取到它的原型："),a("code",[t._v("obj.__proto__ => Object")])]),t._v(" "),a("p",[t._v("对象是可以没有原型的——只需要这样定义对象：let obj = Object.create(null, { name: '孙悟空' })。这样定义出来的对象没有原型，它只有一个属性 name，这个对象是一个完全的数据字典对象。")]),t._v(" "),a("h2",{attrs:{id:"二、原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、原型链"}},[t._v("#")]),t._v(" 二、原型链")]),t._v(" "),a("p",[t._v("原型链就像是家族族谱，儿子到父亲到爷爷，这样一代代地数下去。")]),t._v(" "),a("p",[t._v("一个普通的对象 obj 的原型是 Object，Object 没有原型。那么这个原型链就是 obj ---\x3e Object ---\x3e null。")])])}),[],!1,null,null,null);e.default=_.exports}}]);