(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{434:function(t,s,n){"use strict";n.r(s);var a=n(45),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"_17-解码异或后的数组-简单"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-解码异或后的数组-简单"}},[t._v("#")]),t._v(" 17. 解码异或后的数组(简单)")]),t._v(" "),n("p",[n("strong",[t._v("题目描述：")])]),t._v(" "),n("p",[t._v("未知 整数数组 arr 由 n 个非负整数组成。")]),t._v(" "),n("p",[t._v("经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] XOR arr[i + 1] 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。")]),t._v(" "),n("p",[t._v("给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。")]),t._v(" "),n("p",[t._v("请解码返回原数组 arr 。可以证明答案存在并且是唯一的。")]),t._v(" "),n("p",[n("strong",[t._v("示例1：")])]),t._v(" "),n("p",[t._v("输入：encoded = [1,2,3], first = 1")]),t._v(" "),n("p",[t._v("输出：[1,0,2,1]")]),t._v(" "),n("p",[t._v("解释：若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]")]),t._v(" "),n("p",[n("strong",[t._v("示例2：")])]),t._v(" "),n("p",[t._v("输入：encoded = [6,2,7,3], first = 4")]),t._v(" "),n("p",[t._v("输出：[4,2,0,7,4]")]),t._v(" "),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("2 <= n <= 104")])]),t._v(" "),n("li",[n("p",[t._v("encoded.length == n - 1")])]),t._v(" "),n("li",[n("p",[t._v("0 <= encoded[i] <= 105")])]),t._v(" "),n("li",[n("p",[t._v("0 <= first <= 105")])])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("答案：")])])]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @param {number[]} encoded\n * @param {number} first\n * @return {number[]}\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("decode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("encoded"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" first")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" encoded"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cur")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("cur"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("first"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("blockquote",[n("p",[n("strong",[t._v("解释：")])]),t._v(" "),n("p",[t._v("这又是一个异或题目。题目说的是解码异或，其实考察的是异或的运算公式：a^b=c --\x3e a=b^c\n"),n("br"),t._v(" "),n("br")]),t._v(" "),n("p",[t._v("这个答案参考了别人的代码，不过学到了一些东西：reduce 方法的 init 参数可以是一个数组，这个数组是直接把一个数字塞进去形成的，这个写法头一次见。而且 callbackFn 中的参数 pre 好像可以这样理解：pre=init; 最后是 callbackFn 的返回值，相当于 pre=pre; 这样一想就清晰多了。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);