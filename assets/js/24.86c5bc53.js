(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{359:function(t,s,n){t.exports=n.p+"assets/img/leetcode-38.8aaeed58.png"},527:function(t,s,n){"use strict";n.r(s);var a=n(45),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_12-外观数列-简单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-外观数列-简单"}},[t._v("#")]),t._v(" 12. 外观数列(简单)")]),t._v(" "),a("p",[a("strong",[t._v("题目描述：")])]),t._v(" "),a("p",[t._v("给定一个正整数 n ，输出外观数列的第 n 项。")]),t._v(" "),a("p",[t._v("「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。")]),t._v(" "),a("p",[t._v("你可以将其视作是由递归公式定义的数字字符串序列：")]),t._v(" "),a("ul",[a("li",[t._v('countAndSay(1) = "1"')]),t._v(" "),a("li",[t._v("countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。")])]),t._v(" "),a("p",[t._v("前五项如下：")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("1")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("11")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("21")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("1211")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("111221")])])])]),t._v(" "),a("p",[t._v("第一项是数字 1")]),t._v(" "),a("p",[t._v('描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 "11"')]),t._v(" "),a("p",[t._v('描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 "21"')]),t._v(" "),a("p",[t._v('描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 "1211"')]),t._v(" "),a("p",[t._v('描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 "111221"')]),t._v(" "),a("p",[t._v("要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。")]),t._v(" "),a("p",[t._v('例如，数字字符串 "3322251" 的描述如下图：')]),t._v(" "),a("p",[a("img",{attrs:{src:n(359),alt:"leetcode-38"}})]),t._v(" "),a("p",[a("strong",[t._v("示例1：")])]),t._v(" "),a("p",[t._v("输入：n = 1")]),t._v(" "),a("p",[t._v('输出："1"')]),t._v(" "),a("p",[t._v("解释：这是一个基本样例。")]),t._v(" "),a("p",[a("strong",[t._v("示例2：")])]),t._v(" "),a("p",[t._v("输入：n = 4")]),t._v(" "),a("p",[t._v('输出："1211"')]),t._v(" "),a("p",[t._v("解释：")]),t._v(" "),a("p",[t._v('countAndSay(1) = "1"\ncountAndSay(2) = 读 "1" = 一 个 1 = "11"\ncountAndSay(3) = 读 "11" = 二 个 1 = "21"\ncountAndSay(4) = 读 "21" = 一 个 2 + 一 个 1 = "12" + "11" = "1211"')]),t._v(" "),a("p",[a("strong",[t._v("提示：")])]),t._v(" "),a("ul",[a("li",[t._v("1 <= n <= 30")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("答案——递归+正则：")])])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @param {number} n\n * @return {string}\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("countAndSay")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("countAndSay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d)\\1*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("blockquote",[a("p",[a("strong",[t._v("解释：")])]),t._v(" "),a("p",[t._v("看到那个提示没有，n 是有范围的，又因为这个题目有规律，所以如果够闲，就可以写一个长度为 30 的数组('1', '11', '21', '1211', '111221', ...)，然后直接从数组匹配=。=   但这并不是正经解法，想想就算了。\n"),a("br"),t._v(" "),a("br"),t._v("\n答案虽然用了递归，但赖于我之前被递归蹂躏的经历，这个题目的递归还是能看懂的，关键的地方在于 "),a("code",[t._v("/(\\d)\\1*/g")]),t._v(" 这个正则表达式的含义，这个含义我看不懂，答主的回复是这样的："),a("code",[t._v("/(\\d)\\1*/g 这个正则表示，全局匹配，匹配一位数字或者匹配相同的多位数字， () -> 表示子匹配，\\1表示对于第一个子匹配的引用，当匹配的一位数字后，继续查看后面是否有相同的0个或者多个相同数字；n = 4 的时候，匹配的是n = 3的结果，也就是21，所以temp就是[2，1]；n = 5的时候，匹配n = 4 的结果，1211， 一位数字分别有1、2，相同的多位数字有11，所以temp是[1,2,11]")]),t._v("。大概是能看明白，但是之前没接触过，所以还是很吃力。")]),t._v(" "),a("p",[t._v("另外，这个题目可以用递归结合指针来做，但那个做法看着比这个复杂，就犯懒不记录了= =。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);