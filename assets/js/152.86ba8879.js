(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{548:function(s,t,n){"use strict";n.r(t);var a=n(45),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"_6-判断句子是否为全字母句-简单"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-判断句子是否为全字母句-简单"}},[s._v("#")]),s._v(" 6. 判断句子是否为全字母句(简单)")]),s._v(" "),n("p",[n("strong",[s._v("题目描述：")])]),s._v(" "),n("p",[s._v("全字母句 指包含英语字母表中每个字母至少一次的句子。")]),s._v(" "),n("p",[s._v("给你一个仅由小写英文字母组成的字符串 sentence ，请你判断 sentence 是否为 全字母句 。")]),s._v(" "),n("p",[s._v("如果是，返回 true ；否则，返回 false 。")]),s._v(" "),n("p",[n("strong",[s._v("示例1：")])]),s._v(" "),n("p",[s._v('输入：sentence = "thequickbrownfoxjumpsoverthelazydog"')]),s._v(" "),n("p",[s._v("输出：true")]),s._v(" "),n("p",[s._v("解释：sentence 包含英语字母表中每个字母至少一次。")]),s._v(" "),n("p",[n("strong",[s._v("示例2：")])]),s._v(" "),n("p",[s._v('输入：sentence = "leetcode"')]),s._v(" "),n("p",[s._v("输出：false")]),s._v(" "),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[s._v("1 <= sentence.length <= 1000")]),s._v(" "),n("li",[s._v("sentence 由小写英语字母组成")])]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("答案：")])])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {string} sentence\n * @return {boolean}\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("checkIfPangram")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("sentence")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sentence"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sentence"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("blockquote",[n("p",[n("strong",[s._v("解释：")])]),s._v(" "),n("p",[s._v("答案是抄的，这个思路很清晰。首先设置一个边界条件：判断字符串是否大于等于 26；然后将字符串转换为数组，再将数组转换成集合，集合会自动进行去重处理，然后判断集合元素的长度是否为 26。需要注意的就是集合的长度判断需要用属性 size，而不是 length。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);