(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{432:function(s,t,a){"use strict";a.r(t);var n=a(45),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"_14-拿硬币-简单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-拿硬币-简单"}},[s._v("#")]),s._v(" 14. 拿硬币(简单)")]),s._v(" "),a("p",[a("strong",[s._v("题目描述：")])]),s._v(" "),a("p",[s._v("桌上有 n 堆力扣币，每堆的数量保存在数组 coins 中。我们每次可以选择任意一堆，拿走其中的一枚或者两枚，求拿完所有力扣币的最少次数。")]),s._v(" "),a("p",[a("strong",[s._v("示例1：")])]),s._v(" "),a("p",[s._v("输入：[4,2,1]")]),s._v(" "),a("p",[s._v("输出：4")]),s._v(" "),a("p",[s._v("解释：第一堆力扣币最少需要拿 2 次，第二堆最少需要拿 1 次，第三堆最少需要拿 1 次，总共 4 次即可拿完。")]),s._v(" "),a("p",[a("strong",[s._v("示例2：")])]),s._v(" "),a("p",[s._v("输入：[2,3,10]")]),s._v(" "),a("p",[s._v("输出：8")]),s._v(" "),a("p",[a("strong",[s._v("限制：")])]),s._v(" "),a("p",[s._v("1 <= n <= 4")]),s._v(" "),a("p",[s._v("1 <= coins[i] <= 10")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("答案：")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {number[]} coins\n * @return {number}\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("minCount")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("coins")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cur")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" pre"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" pre"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("blockquote",[a("p",[a("strong",[s._v("解释：")]),a("br"),s._v("\n这个答案是自己写的。\n"),a("br"),s._v(" "),a("br")]),s._v(" "),a("p",[s._v("一开始打算对数组求和，然后判断结果的奇偶性，再 (结果 / 2) 或者 (结果-1) / 2；但这个思路不对劲，因为是每次只能选一堆，如果按照上面的思路，那两堆 1 个硬币的话，只需要拿一次，但按照题目来看很显然是要拿两次的，所以要分别计算每堆需要拿的次数，然后再对次数求和。\n"),a("br"),s._v(" "),a("br")]),s._v(" "),a("p",[s._v("这一次用了 reduce，总算是大概摸清楚这个方法了。reduce 的第一个回调函数参数(callbackFn)内，需要有 return 语句，这个 return 语句会将本次函数调用的结果返回给下一次调用。\n"),a("br"),s._v(" "),a("br")]),s._v(" "),a("p",[s._v("拿示例1来举例：因为我这里设置了 reduce 的第二个初始值参数(init)为 0，所以第一次的 pre 是 0，callbackFn 执行一次之后，pre 变成 2 (0+2)，callbackFn 执行第二次，pre 变成 3 (2+1 —— 这里的 2 就是上一次的调用结果)，callbackFn 执行第三次，pre 变成 4 (3+1 —— 这里的 3 就是上一次的调用结果)。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);