(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{569:function(n,t,s){"use strict";s.r(t);var a=s(45),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h3",{attrs:{id:"_1-删除中间节点-简单"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-删除中间节点-简单"}},[n._v("#")]),n._v(" 1. 删除中间节点(简单)")]),n._v(" "),s("p",[s("strong",[n._v("题目描述：")])]),n._v(" "),s("p",[n._v("实现一种算法，删除单向链表中间的某个节点（即不是第一个或最后一个节点），假定你只能访问该节点。")]),n._v(" "),s("p",[s("strong",[n._v("示例：")])]),n._v(" "),s("p",[n._v("输入：单向链表a->b->c->d->e->f中的节点c")]),n._v(" "),s("p",[n._v("结果：不返回任何数据，但该链表变为a->b->d->e->f")]),n._v(" "),s("blockquote",[s("p",[s("strong",[n._v("答案：")])])]),n._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/**\n * @param {ListNode} node\n * @return {void} Do not return anything, modify node in-place instead.\n */")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("var")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[n._v("deleteNode")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("val\n    node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("next\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("blockquote",[s("p",[s("strong",[n._v("解释：")]),s("br"),n._v("\n很惭愧，这个题我懵了。")]),n._v(" "),s("p",[n._v("因为已知是单链表，我就想着该怎么把该节点(node)的前一个节点(preNode)和该节点的后一个节点(nextNode)连起来。后来看了题解，才发现应该这样解决：将 nextNode.val 的值赋给 node.val，并将 nextNode.next 赋给 node.next。这两步操作执行完毕，就相当于用后一个节点覆盖了该节点，自然就达成了节点删除的目的。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);